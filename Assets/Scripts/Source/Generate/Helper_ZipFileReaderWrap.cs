//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Helper_ZipFileReaderWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Helper.ZipFileReader), typeof(System.Object));
		L.RegFunction("Load", Load);
		L.RegFunction("GetFile", GetFile);
		L.RegFunction("GetText", GetText);
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("New", _CreateHelper_ZipFileReader);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Url", get_Url, null);
		L.RegVar("LastError", get_LastError, null);
		L.RegVar("ZipInputStream", get_ZipInputStream, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateHelper_ZipFileReader(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				Helper.ZipFileReader obj = new Helper.ZipFileReader(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Helper.ZipFileReader.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Load(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Helper.ZipFileReader obj = (Helper.ZipFileReader)ToLua.CheckObject<Helper.ZipFileReader>(L, 1);
			bool o = obj.Load();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Helper.ZipFileReader obj = (Helper.ZipFileReader)ToLua.CheckObject<Helper.ZipFileReader>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			System.IO.MemoryStream arg1 = (System.IO.MemoryStream)ToLua.CheckObject<System.IO.MemoryStream>(L, 3);
			bool o = obj.GetFile(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetText(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Helper.ZipFileReader obj = (Helper.ZipFileReader)ToLua.CheckObject<Helper.ZipFileReader>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.GetText(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Helper.ZipFileReader obj = (Helper.ZipFileReader)ToLua.CheckObject<Helper.ZipFileReader>(L, 1);
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Url(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Helper.ZipFileReader obj = (Helper.ZipFileReader)o;
			string ret = obj.Url;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Url on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LastError(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Helper.ZipFileReader obj = (Helper.ZipFileReader)o;
			string ret = obj.LastError;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LastError on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ZipInputStream(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Helper.ZipFileReader obj = (Helper.ZipFileReader)o;
			ICSharpCode.SharpZipLib.Zip.ZipInputStream ret = obj.ZipInputStream;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ZipInputStream on a nil value");
		}
	}
}


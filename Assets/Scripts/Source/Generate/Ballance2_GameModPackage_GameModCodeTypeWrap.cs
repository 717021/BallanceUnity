//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Ballance2_GameModPackage_GameModCodeTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(Ballance2.GameModPackage.GameModCodeType));
		L.RegVar("Unknow", get_Unknow, null);
		L.RegVar("LUA", get_LUA, null);
		L.RegVar("CSharp", get_CSharp, null);
		L.RegVar("CSharpNative", get_CSharpNative, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<Ballance2.GameModPackage.GameModCodeType>.Check = CheckType;
		StackTraits<Ballance2.GameModPackage.GameModCodeType>.Push = Push;
	}

	static void Push(IntPtr L, Ballance2.GameModPackage.GameModCodeType arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(Ballance2.GameModPackage.GameModCodeType), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Unknow(IntPtr L)
	{
		ToLua.Push(L, Ballance2.GameModPackage.GameModCodeType.Unknow);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LUA(IntPtr L)
	{
		ToLua.Push(L, Ballance2.GameModPackage.GameModCodeType.LUA);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CSharp(IntPtr L)
	{
		ToLua.Push(L, Ballance2.GameModPackage.GameModCodeType.CSharp);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CSharpNative(IntPtr L)
	{
		ToLua.Push(L, Ballance2.GameModPackage.GameModCodeType.CSharpNative);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		Ballance2.GameModPackage.GameModCodeType o = (Ballance2.GameModPackage.GameModCodeType)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}


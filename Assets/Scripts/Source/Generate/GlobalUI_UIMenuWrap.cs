//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GlobalUI_UIMenuWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GlobalUI.UIMenu), typeof(GlobalUI.UIPage));
		L.RegFunction("GetEle", GetEle);
		L.RegFunction("InsertEle", InsertEle);
		L.RegFunction("AddEle", AddEle);
		L.RegFunction("RemoveEle", RemoveEle);
		L.RegFunction("UpdateMenu", UpdateMenu);
		L.RegFunction("Oninit", Oninit);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEle(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				GlobalUI.UIMenu obj = (GlobalUI.UIMenu)ToLua.CheckObject<GlobalUI.UIMenu>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				GlobalUI.UIElement o = obj.GetEle(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				GlobalUI.UIMenu obj = (GlobalUI.UIMenu)ToLua.CheckObject<GlobalUI.UIMenu>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				GlobalUI.UIElement o = obj.GetEle(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GlobalUI.UIMenu.GetEle");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InsertEle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			GlobalUI.UIMenu obj = (GlobalUI.UIMenu)ToLua.CheckObject<GlobalUI.UIMenu>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GlobalUI.UIElement arg1 = (GlobalUI.UIElement)ToLua.CheckObject<GlobalUI.UIElement>(L, 3);
			obj.InsertEle(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddEle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GlobalUI.UIMenu obj = (GlobalUI.UIMenu)ToLua.CheckObject<GlobalUI.UIMenu>(L, 1);
			GlobalUI.UIElement arg0 = (GlobalUI.UIElement)ToLua.CheckObject<GlobalUI.UIElement>(L, 2);
			obj.AddEle(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveEle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GlobalUI.UIMenu obj = (GlobalUI.UIMenu)ToLua.CheckObject<GlobalUI.UIMenu>(L, 1);
			GlobalUI.UIElement arg0 = (GlobalUI.UIElement)ToLua.CheckObject<GlobalUI.UIElement>(L, 2);
			obj.RemoveEle(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateMenu(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				GlobalUI.UIMenu obj = (GlobalUI.UIMenu)ToLua.CheckObject<GlobalUI.UIMenu>(L, 1);
				obj.UpdateMenu();
				return 0;
			}
			else if (count == 2)
			{
				GlobalUI.UIMenu obj = (GlobalUI.UIMenu)ToLua.CheckObject<GlobalUI.UIMenu>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				obj.UpdateMenu(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GlobalUI.UIMenu.UpdateMenu");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Oninit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GlobalUI.UIMenu obj = (GlobalUI.UIMenu)ToLua.CheckObject<GlobalUI.UIMenu>(L, 1);
			obj.Oninit();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}


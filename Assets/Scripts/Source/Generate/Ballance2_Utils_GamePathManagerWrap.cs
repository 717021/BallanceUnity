//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Ballance2_Utils_GamePathManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("GamePathManager");
		L.RegFunction("IsAbsolutePath", IsAbsolutePath);
		L.RegFunction("GetResRealPath", GetResRealPath);
		L.RegFunction("GetLevelRealPath", GetLevelRealPath);

		L.RegVar("DEBUG_PATH", get_DEBUG_PATH, null);
		L.RegVar("DEBUG_MODS_PATH", get_DEBUG_MODS_PATH, null);
		L.RegVar("DEBUG_LEVELS_PATH", get_DEBUG_LEVELS_PATH, null);
		L.RegVar("ANDROID_MODS_PATH", get_ANDROID_MODS_PATH, null);
		L.RegVar("ANDROID_LEVELS_PATH", get_ANDROID_LEVELS_PATH, null);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsAbsolutePath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			bool o = Ballance2.Utils.GamePathManager.IsAbsolutePath(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetResRealPath(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				string o = Ballance2.Utils.GamePathManager.GetResRealPath(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				string o = Ballance2.Utils.GamePathManager.GetResRealPath(arg0, arg1, arg2);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Ballance2.Utils.GamePathManager.GetResRealPath");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLevelRealPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			string o = Ballance2.Utils.GamePathManager.GetLevelRealPath(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}


	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DEBUG_PATH(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Ballance2.Utils.GamePathManager.DEBUG_PATH);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DEBUG_MODS_PATH(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Ballance2.Utils.GamePathManager.DEBUG_MODS_PATH);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DEBUG_LEVELS_PATH(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Ballance2.Utils.GamePathManager.DEBUG_LEVELS_PATH);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ANDROID_MODS_PATH(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Ballance2.Utils.GamePathManager.ANDROID_MODS_PATH);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ANDROID_LEVELS_PATH(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Ballance2.Utils.GamePathManager.ANDROID_LEVELS_PATH);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}


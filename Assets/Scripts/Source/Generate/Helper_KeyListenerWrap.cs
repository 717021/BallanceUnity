//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Helper_KeyListenerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Helper.KeyListener), typeof(System.Object));
		L.RegFunction("AddKeyListen", AddKeyListen);
		L.RegFunction("ClearKeyListen", ClearKeyListen);
		L.RegFunction("ListenKey", ListenKey);
		L.RegFunction("New", _CreateHelper_KeyListener);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegFunction("VoidDelegate", Helper_KeyListener_VoidDelegate);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateHelper_KeyListener(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Helper.KeyListener obj = new Helper.KeyListener();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Helper.KeyListener.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddKeyListen(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				Helper.KeyListener obj = (Helper.KeyListener)ToLua.CheckObject<Helper.KeyListener>(L, 1);
				UnityEngine.KeyCode arg0 = (UnityEngine.KeyCode)ToLua.CheckObject(L, 2, typeof(UnityEngine.KeyCode));
				Helper.KeyListener.VoidDelegate arg1 = (Helper.KeyListener.VoidDelegate)ToLua.CheckDelegate<Helper.KeyListener.VoidDelegate>(L, 3);
				obj.AddKeyListen(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				Helper.KeyListener obj = (Helper.KeyListener)ToLua.CheckObject<Helper.KeyListener>(L, 1);
				UnityEngine.KeyCode arg0 = (UnityEngine.KeyCode)ToLua.CheckObject(L, 2, typeof(UnityEngine.KeyCode));
				UnityEngine.KeyCode arg1 = (UnityEngine.KeyCode)ToLua.CheckObject(L, 3, typeof(UnityEngine.KeyCode));
				Helper.KeyListener.VoidDelegate arg2 = (Helper.KeyListener.VoidDelegate)ToLua.CheckDelegate<Helper.KeyListener.VoidDelegate>(L, 4);
				obj.AddKeyListen(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Helper.KeyListener.AddKeyListen");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearKeyListen(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Helper.KeyListener obj = (Helper.KeyListener)ToLua.CheckObject<Helper.KeyListener>(L, 1);
			obj.ClearKeyListen();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ListenKey(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Helper.KeyListener obj = (Helper.KeyListener)ToLua.CheckObject<Helper.KeyListener>(L, 1);
			obj.ListenKey();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Helper_KeyListener_VoidDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Helper.KeyListener.VoidDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Helper.KeyListener.VoidDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}


//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameCommandManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameCommandManager), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("Log", Log);
		L.RegFunction("LogErr", LogErr);
		L.RegFunction("LogWarn", LogWarn);
		L.RegFunction("LogInfo", LogInfo);
		L.RegFunction("OutPut", OutPut);
		L.RegFunction("OutPutError", OutPutError);
		L.RegFunction("OutPutWarn", OutPutWarn);
		L.RegFunction("OutPutInfo", OutPutInfo);
		L.RegFunction("OnCommandOk", OnCommandOk);
		L.RegFunction("OnCommandChanged", OnCommandChanged);
		L.RegFunction("RegisterCommand", RegisterCommand);
		L.RegFunction("IsCommandRegistered", IsCommandRegistered);
		L.RegFunction("UnRegisterCommand", UnRegisterCommand);
		L.RegFunction("SetCurrentCommandResult", SetCurrentCommandResult);
		L.RegFunction("NoDebug", NoDebug);
		L.RegFunction("CanDebug", CanDebug);
		L.RegFunction("ExitGameClear", ExitGameClear);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("DisplayInfoUi", get_DisplayInfoUi, set_DisplayInfoUi);
		L.RegVar("panelCommandRectTransform", get_panelCommandRectTransform, set_panelCommandRectTransform);
		L.RegVar("textLinesRectTransform", get_textLinesRectTransform, set_textLinesRectTransform);
		L.RegVar("textLinesViewRectTransform", get_textLinesViewRectTransform, set_textLinesViewRectTransform);
		L.RegVar("textLinesLayoutElement", get_textLinesLayoutElement, set_textLinesLayoutElement);
		L.RegVar("panelCommand", get_panelCommand, set_panelCommand);
		L.RegVar("textShowCmd", get_textShowCmd, set_textShowCmd);
		L.RegVar("displayRunInfo", get_displayRunInfo, set_displayRunInfo);
		L.RegVar("textLines", get_textLines, set_textLines);
		L.RegVar("textTips", get_textTips, set_textTips);
		L.RegVar("inputCommand", get_inputCommand, set_inputCommand);
		L.RegVar("dragCommand", get_dragCommand, set_dragCommand);
		L.RegVar("cmdlinesDUIRayIgnore", get_cmdlinesDUIRayIgnore, set_cmdlinesDUIRayIgnore);
		L.RegVar("cmdlinesScrollRect", get_cmdlinesScrollRect, set_cmdlinesScrollRect);
		L.RegVar("textLinesDUIRayIgnore", get_textLinesDUIRayIgnore, set_textLinesDUIRayIgnore);
		L.RegVar("Instance", get_Instance, null);
		L.RegVar("CommandShow", get_CommandShow, set_CommandShow);
		L.RegVar("GameBulider", get_GameBulider, set_GameBulider);
		L.RegFunction("CommandReceiverHandler", GameCommandManager_CommandReceiverHandler);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Log(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameCommandManager obj = (GameCommandManager)ToLua.CheckObject<GameCommandManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.Log(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LogErr(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameCommandManager obj = (GameCommandManager)ToLua.CheckObject<GameCommandManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.LogErr(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LogWarn(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameCommandManager obj = (GameCommandManager)ToLua.CheckObject<GameCommandManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.LogWarn(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LogInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameCommandManager obj = (GameCommandManager)ToLua.CheckObject<GameCommandManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.LogInfo(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OutPut(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameCommandManager obj = (GameCommandManager)ToLua.CheckObject<GameCommandManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.OutPut(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OutPutError(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				GameCommandManager obj = (GameCommandManager)ToLua.CheckObject<GameCommandManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.OutPutError(arg0);
				return 0;
			}
			else if (count == 3)
			{
				GameCommandManager obj = (GameCommandManager)ToLua.CheckObject<GameCommandManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				obj.OutPutError(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameCommandManager.OutPutError");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OutPutWarn(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				GameCommandManager obj = (GameCommandManager)ToLua.CheckObject<GameCommandManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.OutPutWarn(arg0);
				return 0;
			}
			else if (count == 3)
			{
				GameCommandManager obj = (GameCommandManager)ToLua.CheckObject<GameCommandManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				obj.OutPutWarn(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameCommandManager.OutPutWarn");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OutPutInfo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				GameCommandManager obj = (GameCommandManager)ToLua.CheckObject<GameCommandManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				obj.OutPutInfo(arg0);
				return 0;
			}
			else if (count == 3)
			{
				GameCommandManager obj = (GameCommandManager)ToLua.CheckObject<GameCommandManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				obj.OutPutInfo(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameCommandManager.OutPutInfo");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnCommandOk(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameCommandManager obj = (GameCommandManager)ToLua.CheckObject<GameCommandManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.OnCommandOk(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnCommandChanged(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			GameCommandManager obj = (GameCommandManager)ToLua.CheckObject<GameCommandManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.OnCommandChanged(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RegisterCommand(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				GameCommandManager.CommandReceiverHandler arg1 = (GameCommandManager.CommandReceiverHandler)ToLua.CheckDelegate<GameCommandManager.CommandReceiverHandler>(L, 2);
				bool o = GameCommandManager.RegisterCommand(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				GameCommandManager.CommandReceiverHandler arg1 = (GameCommandManager.CommandReceiverHandler)ToLua.CheckDelegate<GameCommandManager.CommandReceiverHandler>(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				bool o = GameCommandManager.RegisterCommand(arg0, arg1, arg2);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 4)
			{
				string arg0 = ToLua.CheckString(L, 1);
				GameCommandManager.CommandReceiverHandler arg1 = (GameCommandManager.CommandReceiverHandler)ToLua.CheckDelegate<GameCommandManager.CommandReceiverHandler>(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				string arg3 = ToLua.CheckString(L, 4);
				bool o = GameCommandManager.RegisterCommand(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 5)
			{
				string arg0 = ToLua.CheckString(L, 1);
				GameCommandManager.CommandReceiverHandler arg1 = (GameCommandManager.CommandReceiverHandler)ToLua.CheckDelegate<GameCommandManager.CommandReceiverHandler>(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				string arg3 = ToLua.CheckString(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				bool o = GameCommandManager.RegisterCommand(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 6)
			{
				string arg0 = ToLua.CheckString(L, 1);
				GameCommandManager.CommandReceiverHandler arg1 = (GameCommandManager.CommandReceiverHandler)ToLua.CheckDelegate<GameCommandManager.CommandReceiverHandler>(L, 2);
				string arg2 = ToLua.CheckString(L, 3);
				string arg3 = ToLua.CheckString(L, 4);
				int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
				GameCommandManager.CommandReceiverHandler arg5 = (GameCommandManager.CommandReceiverHandler)ToLua.CheckDelegate<GameCommandManager.CommandReceiverHandler>(L, 6);
				bool o = GameCommandManager.RegisterCommand(arg0, arg1, arg2, arg3, arg4, arg5);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: GameCommandManager.RegisterCommand");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsCommandRegistered(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			bool o = GameCommandManager.IsCommandRegistered(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnRegisterCommand(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			GameCommandManager.CommandReceiverHandler arg1 = (GameCommandManager.CommandReceiverHandler)ToLua.CheckDelegate<GameCommandManager.CommandReceiverHandler>(L, 2);
			bool o = GameCommandManager.UnRegisterCommand(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCurrentCommandResult(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			GameCommandManager.SetCurrentCommandResult(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int NoDebug(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameCommandManager obj = (GameCommandManager)ToLua.CheckObject<GameCommandManager>(L, 1);
			obj.NoDebug();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CanDebug(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameCommandManager obj = (GameCommandManager)ToLua.CheckObject<GameCommandManager>(L, 1);
			obj.CanDebug();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ExitGameClear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			GameCommandManager obj = (GameCommandManager)ToLua.CheckObject<GameCommandManager>(L, 1);
			obj.ExitGameClear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DisplayInfoUi(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCommandManager obj = (GameCommandManager)o;
			DisplayInfoUi ret = obj.DisplayInfoUi;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DisplayInfoUi on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_panelCommandRectTransform(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCommandManager obj = (GameCommandManager)o;
			UnityEngine.RectTransform ret = obj.panelCommandRectTransform;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index panelCommandRectTransform on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_textLinesRectTransform(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCommandManager obj = (GameCommandManager)o;
			UnityEngine.RectTransform ret = obj.textLinesRectTransform;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textLinesRectTransform on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_textLinesViewRectTransform(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCommandManager obj = (GameCommandManager)o;
			UnityEngine.RectTransform ret = obj.textLinesViewRectTransform;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textLinesViewRectTransform on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_textLinesLayoutElement(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCommandManager obj = (GameCommandManager)o;
			UnityEngine.UI.LayoutElement ret = obj.textLinesLayoutElement;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textLinesLayoutElement on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_panelCommand(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCommandManager obj = (GameCommandManager)o;
			UnityEngine.GameObject ret = obj.panelCommand;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index panelCommand on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_textShowCmd(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCommandManager obj = (GameCommandManager)o;
			UnityEngine.GameObject ret = obj.textShowCmd;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textShowCmd on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_displayRunInfo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCommandManager obj = (GameCommandManager)o;
			UnityEngine.GameObject ret = obj.displayRunInfo;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index displayRunInfo on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_textLines(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCommandManager obj = (GameCommandManager)o;
			UnityEngine.UI.Text ret = obj.textLines;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textLines on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_textTips(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCommandManager obj = (GameCommandManager)o;
			UnityEngine.UI.Text ret = obj.textTips;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textTips on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_inputCommand(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCommandManager obj = (GameCommandManager)o;
			UnityEngine.UI.InputField ret = obj.inputCommand;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index inputCommand on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_dragCommand(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCommandManager obj = (GameCommandManager)o;
			DUIDrag ret = obj.dragCommand;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index dragCommand on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_cmdlinesDUIRayIgnore(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCommandManager obj = (GameCommandManager)o;
			DUIRayIgnore ret = obj.cmdlinesDUIRayIgnore;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index cmdlinesDUIRayIgnore on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_cmdlinesScrollRect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCommandManager obj = (GameCommandManager)o;
			UnityEngine.UI.ScrollRect ret = obj.cmdlinesScrollRect;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index cmdlinesScrollRect on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_textLinesDUIRayIgnore(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCommandManager obj = (GameCommandManager)o;
			DUIRayIgnore ret = obj.textLinesDUIRayIgnore;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textLinesDUIRayIgnore on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.Push(L, GameCommandManager.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CommandShow(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCommandManager obj = (GameCommandManager)o;
			bool ret = obj.CommandShow;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CommandShow on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GameBulider(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCommandManager obj = (GameCommandManager)o;
			GameBulider ret = obj.GameBulider;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index GameBulider on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DisplayInfoUi(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCommandManager obj = (GameCommandManager)o;
			DisplayInfoUi arg0 = (DisplayInfoUi)ToLua.CheckObject<DisplayInfoUi>(L, 2);
			obj.DisplayInfoUi = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index DisplayInfoUi on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_panelCommandRectTransform(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCommandManager obj = (GameCommandManager)o;
			UnityEngine.RectTransform arg0 = (UnityEngine.RectTransform)ToLua.CheckObject(L, 2, typeof(UnityEngine.RectTransform));
			obj.panelCommandRectTransform = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index panelCommandRectTransform on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_textLinesRectTransform(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCommandManager obj = (GameCommandManager)o;
			UnityEngine.RectTransform arg0 = (UnityEngine.RectTransform)ToLua.CheckObject(L, 2, typeof(UnityEngine.RectTransform));
			obj.textLinesRectTransform = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textLinesRectTransform on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_textLinesViewRectTransform(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCommandManager obj = (GameCommandManager)o;
			UnityEngine.RectTransform arg0 = (UnityEngine.RectTransform)ToLua.CheckObject(L, 2, typeof(UnityEngine.RectTransform));
			obj.textLinesViewRectTransform = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textLinesViewRectTransform on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_textLinesLayoutElement(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCommandManager obj = (GameCommandManager)o;
			UnityEngine.UI.LayoutElement arg0 = (UnityEngine.UI.LayoutElement)ToLua.CheckObject<UnityEngine.UI.LayoutElement>(L, 2);
			obj.textLinesLayoutElement = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textLinesLayoutElement on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_panelCommand(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCommandManager obj = (GameCommandManager)o;
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			obj.panelCommand = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index panelCommand on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_textShowCmd(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCommandManager obj = (GameCommandManager)o;
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			obj.textShowCmd = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textShowCmd on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_displayRunInfo(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCommandManager obj = (GameCommandManager)o;
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
			obj.displayRunInfo = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index displayRunInfo on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_textLines(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCommandManager obj = (GameCommandManager)o;
			UnityEngine.UI.Text arg0 = (UnityEngine.UI.Text)ToLua.CheckObject<UnityEngine.UI.Text>(L, 2);
			obj.textLines = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textLines on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_textTips(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCommandManager obj = (GameCommandManager)o;
			UnityEngine.UI.Text arg0 = (UnityEngine.UI.Text)ToLua.CheckObject<UnityEngine.UI.Text>(L, 2);
			obj.textTips = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textTips on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_inputCommand(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCommandManager obj = (GameCommandManager)o;
			UnityEngine.UI.InputField arg0 = (UnityEngine.UI.InputField)ToLua.CheckObject<UnityEngine.UI.InputField>(L, 2);
			obj.inputCommand = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index inputCommand on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_dragCommand(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCommandManager obj = (GameCommandManager)o;
			DUIDrag arg0 = (DUIDrag)ToLua.CheckObject<DUIDrag>(L, 2);
			obj.dragCommand = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index dragCommand on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_cmdlinesDUIRayIgnore(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCommandManager obj = (GameCommandManager)o;
			DUIRayIgnore arg0 = (DUIRayIgnore)ToLua.CheckObject<DUIRayIgnore>(L, 2);
			obj.cmdlinesDUIRayIgnore = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index cmdlinesDUIRayIgnore on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_cmdlinesScrollRect(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCommandManager obj = (GameCommandManager)o;
			UnityEngine.UI.ScrollRect arg0 = (UnityEngine.UI.ScrollRect)ToLua.CheckObject<UnityEngine.UI.ScrollRect>(L, 2);
			obj.cmdlinesScrollRect = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index cmdlinesScrollRect on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_textLinesDUIRayIgnore(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCommandManager obj = (GameCommandManager)o;
			DUIRayIgnore arg0 = (DUIRayIgnore)ToLua.CheckObject<DUIRayIgnore>(L, 2);
			obj.textLinesDUIRayIgnore = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index textLinesDUIRayIgnore on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CommandShow(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCommandManager obj = (GameCommandManager)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.CommandShow = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CommandShow on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GameBulider(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			GameCommandManager obj = (GameCommandManager)o;
			GameBulider arg0 = (GameBulider)ToLua.CheckObject<GameBulider>(L, 2);
			obj.GameBulider = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index GameBulider on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GameCommandManager_CommandReceiverHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<GameCommandManager.CommandReceiverHandler>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<GameCommandManager.CommandReceiverHandler>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}


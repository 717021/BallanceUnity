//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Helper_StringSpliterWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Helper.StringSpliter), typeof(System.Object));
		L.RegFunction("New", _CreateHelper_StringSpliter);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Success", get_Success, null);
		L.RegVar("Count", get_Count, null);
		L.RegVar("Result", get_Result, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateHelper_StringSpliter(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				char arg1 = (char)LuaDLL.luaL_checknumber(L, 2);
				Helper.StringSpliter obj = new Helper.StringSpliter(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				char arg1 = (char)LuaDLL.luaL_checknumber(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				Helper.StringSpliter obj = new Helper.StringSpliter(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Helper.StringSpliter.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Success(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Helper.StringSpliter obj = (Helper.StringSpliter)o;
			bool ret = obj.Success;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Success on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Count(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Helper.StringSpliter obj = (Helper.StringSpliter)o;
			int ret = obj.Count;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Count on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Result(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Helper.StringSpliter obj = (Helper.StringSpliter)o;
			string[] ret = obj.Result;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Result on a nil value");
		}
	}
}


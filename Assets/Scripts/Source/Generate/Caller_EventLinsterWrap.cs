//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Caller_EventLinsterWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Caller.EventLinster), typeof(System.Object));
		L.RegFunction("OnEvent", OnEvent);
		L.RegFunction("New", _CreateCaller_EventLinster);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("receiverName", get_receiverName, set_receiverName);
		L.RegVar("eventName", get_eventName, set_eventName);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateCaller_EventLinster(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				Caller.EventLinster obj = new Caller.EventLinster(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				Caller.EventLinster obj = new Caller.EventLinster(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Caller.EventLinster.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnEvent(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			Caller.EventLinster obj = (Caller.EventLinster)ToLua.CheckObject<Caller.EventLinster>(L, 1);
			object arg0 = ToLua.ToVarObject(L, 2);
			object[] arg1 = ToLua.ToParamsObject(L, 3, count - 2);
			obj.OnEvent(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_receiverName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Caller.EventLinster obj = (Caller.EventLinster)o;
			string ret = obj.receiverName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index receiverName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_eventName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Caller.EventLinster obj = (Caller.EventLinster)o;
			string ret = obj.eventName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index eventName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_receiverName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Caller.EventLinster obj = (Caller.EventLinster)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.receiverName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index receiverName on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_eventName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Caller.EventLinster obj = (Caller.EventLinster)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.eventName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index eventName on a nil value");
		}
	}
}

